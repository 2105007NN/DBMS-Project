--TRIGGER 1, CHECK_OUT 
CREATE OR REPLACE TRIGGER CHECK_OUT
BEFORE DELETE
ON CART_PRODUCT
FOR EACH ROW
DECLARE 
	ID NUMBER;
	PID NUMBER;
	Q NUMBER;
	ORDER_NO NUMBER;
	X NUMBER;
	TOTAL_PRICE NUMBER;
	BALANCE NUMBER;
	PRICE NUMBER;
	STOCK NUMBER;
BEGIN
	ID := :OLD.CART_ID;
	PID := :OLD.PRODUCT_ID;
	Q := :OLD.QUANTITY;
	SELECT MAX(O.ORDER_NO) INTO ORDER_NO FROM ORDERS O;
	
	DBMS_OUTPUT.PUT_LINE(ORDER_NO || ',' || ID || ',' || PID || ',' || Q);
	
	SELECT SUM((TC.QUANTITY * P.PRODUCT_PRICE)) INTO TOTAL_PRICE
	FROM TEMP_CART TC JOIN PRODUCT P ON (TC.PRODUCT_ID = P.PRODUCT_ID) 
	WHERE TC.CART_ID = ID;
	
	DBMS_OUTPUT.PUT_LINE(TOTAL_PRICE);
	
	
	SELECT DISTINCT C.BALANCE INTO BALANCE 
	FROM TEMP_CART TC JOIN CUSTOMER C ON (TC.CART_ID = C.CUSTOMER_ID)
	WHERE TC.CART_ID = ID;
	
	DBMS_OUTPUT.PUT_LINE(BALANCE);
	
	SELECT PRODUCT_PRICE INTO PRICE
	FROM PRODUCT
	WHERE PID = PRODUCT_ID;
	
	SELECT STOCK_QUANTITY INTO STOCK
	FROM PRODUCT
	WHERE PID = PRODUCT_ID;
	
	IF(Q > STOCK) THEN 
		RAISE_APPLICATION_ERROR(-20002, PID || ' NOT AVAILABLE IN STOCK');
	END IF;
	
	IF(TOTAL_PRICE > BALANCE) THEN
		RAISE_APPLICATION_ERROR(-20001, 'NOT SUFFICIENT BALANCE');
	
	ELSE
		UPDATE CUSTOMER C
		SET C.BALANCE = BALANCE - (Q * PRICE)
		WHERE C.CUSTOMER_ID = ID;
		
		UPDATE PRODUCT P
		SET P.STOCK_QUANTITY = STOCK - Q
		WHERE P.PRODUCT_ID = PID; 
	END IF;
	
	DBMS_OUTPUT.PUT_LINE('INSERTING INTO ORDER_PRODUCT TABLE - ' || ORDER_NO || ',' || PID || ',' || Q);
	INSERT INTO ORDER_PRODUCT VALUES (ORDER_NO, PID, Q);
	--X := 1/0;
END;
/


--INPUT VALIDATION FOR ADDING PRODUCTS, TRIGGER 2
CREATE OR REPLACE TRIGGER BEFORE_PRODUCT_INSERT
BEFORE INSERT
ON PRODUCT
FOR EACH ROW
DECLARE
   MAX_PRODUCT_ID NUMBER;
   FLAG NUMBER;
BEGIN
   SELECT MAX(PRODUCT_ID) + 1 INTO MAX_PRODUCT_ID FROM PRODUCT;


   SELECT COUNT(*) INTO FLAG FROM PRODUCT
   WHERE PRODUCT_ID=:NEW.PRODUCT_ID;
   
   IF FLAG > 0 THEN
      :NEW.PRODUCT_ID := MAX_PRODUCT_ID; 
   END IF;
END;
/

--PROCEDURE 1, ADDING TO CART
CREATE OR REPLACE PROCEDURE ADD_TO_CART(ID NUMBER, PID NUMBER, Q NUMBER) IS

 ASE BOOLEAN;
 PREV_Q NUMBER;

BEGIN
 DBMS_OUTPUT.PUT_LINE('CART_ID = ' || ID  || ', PRODUCT_ID = ' || PID  || ' , QUANTITY = ' || Q);


 FOR R IN (SELECT * FROM CART_PRODUCT)
  LOOP
   IF R.CART_ID = ID AND R.PRODUCT_ID = PID THEN

     ASE := TRUE;

     EXIT;
   ELSE
    ASE := FALSE;

    END IF;
  END LOOP;
  IF ASE THEN
   DBMS_OUTPUT.PUT_LINE('THIS ENTRY ALREADY EXISTS');

   SELECT QUANTITY INTO PREV_Q FROM CART_PRODUCT CP WHERE ID = CP.CART_ID AND PID = CP.PRODUCT_ID;
    DBMS_OUTPUT.PUT_LINE('PREVIOUS QUANTITY' || PREV_Q);

    UPDATE CART_PRODUCT
    SET QUANTITY = PREV_Q + Q
    WHERE ID = CART_ID AND PID = PRODUCT_ID;

  ELSE
    DBMS_OUTPUT.PUT_LINE('INSERT KORBOOOOO');
    INSERT INTO CART_PRODUCT VALUES (ID, PID, Q);
  END IF;
END;


--FUNCTION 1, GET PARENT CATEGORY
CREATE OR REPLACE FUNCTION GET_PARENT_CATEGORY(P_ID IN NUMBER) RETURN NUMBER IS
	CAT_ID NUMBER;
	PC_NAME VARCHAR2(100);
	PC_ID NUMBER;
BEGIN
	SELECT P.PRODUCT_CATEGORY_ID INTO CAT_ID
	FROM PRODUCT P
	WHERE P.PRODUCT_ID = P_ID;

	SELECT DISTINCT PC.PARENT_CATEGORY_ID INTO PC_ID
	FROM PRODUCT_CATEGORY PC
	WHERE PC.CATEGORY_ID = CAT_ID;


	SELECT DISTINCT UPPER(PC.CATEGORY_NAME) INTO PC_NAME
	FROM PRODUCT_CATEGORY PC
	WHERE PC.CATEGORY_ID = PC_ID;

	RETURN PC_ID;
END;
